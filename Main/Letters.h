#pragma once
#include <LedControl.h>

namespace Letters
{
	const byte A[] = { B00000000,B00111100,B01100110,B01100110,B01111110,B01100110,B01100110,B01100110 };
	const byte B[] = { B01111000,B01001000,B01001000,B01110000,B01001000,B01000100,B01000100,B01111100 };
	const byte C[] = { B00000000,B00011110,B00100000,B01000000,B01000000,B01000000,B00100000,B00011110 };
	const byte D[] = { B00000000,B00111000,B00100100,B00100010,B00100010,B00100100,B00111000,B00000000 };
	const byte E[] = { B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00111100,B00000000 };
	const byte F[] = { B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00100000,B00000000 };
	const byte G[] = { B00000000,B00111110,B00100000,B00100000,B00101110,B00100010,B00111110,B00000000 };
	const byte H[] = { B00000000,B00100100,B00100100,B00111100,B00100100,B00100100,B00100100,B00000000 };
	const byte I[] = { B00000000,B00111000,B00010000,B00010000,B00010000,B00010000,B00111000,B00000000 };
	const byte J[] = { B00000000,B00011100,B00001000,B00001000,B00001000,B00101000,B00111000,B00000000 };
	const byte K[] = { B00000000,B00100100,B00101000,B00110000,B00101000,B00100100,B00100100,B00000000 };
	const byte L[] = { B00000000,B00100000,B00100000,B00100000,B00100000,B00100000,B00111100,B00000000 };
	const byte M[] = { B00000000,B00000000,B01000100,B10101010,B10010010,B10000010,B10000010,B00000000 };
	const byte N[] = { B00000000,B00100010,B00110010,B00101010,B00100110,B00100010,B00000000,B00000000 };
	const byte O[] = { B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B00111100,B00000000 };
	const byte P[] = { B00000000,B00111000,B00100100,B00100100,B00111000,B00100000,B00100000,B00000000 };
	const byte Q[] = { B00000000,B00111100,B01000010,B01000010,B01000010,B01000110,B00111110,B00000001 };
	const byte R[] = { B00000000,B00111000,B00100100,B00100100,B00111000,B00100100,B00100100,B00000000 };
	const byte S[] = { B00000000,B00111100,B00100000,B00111100,B00000100,B00000100,B00111100,B00000000 };
	const byte T[] = { B00000000,B01111100,B00010000,B00010000,B00010000,B00010000,B00010000,B00000000 };
	const byte U[] = { B00000000,B01000010,B01000010,B01000010,B01000010,B00100100,B00011000,B00000000 };
	const byte V[] = { B00000000,B00100010,B00100010,B00100010,B00010100,B00010100,B00001000,B00000000 };
	const byte W[] = { B00000000,B10000010,B10010010,B01010100,B01010100,B00101000,B00000000,B00000000 };
	const byte X[] = { B00000000,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B00000000 };
	const byte Y[] = { B00000000,B01000100,B00101000,B00010000,B00010000,B00010000,B00010000,B00000000 };
	const byte Z[] = { B00000000,B00111100,B00000100,B00001000,B00010000,B00100000,B00111100,B00000000 };
	const byte Exclamation[] = { B00011000,B00011000,B00011000,B00011000,B00011000,B00000000,B00011000,B00011000 };
	const byte frown[8] = { 0x3C,0x42,0xA5,0x81,0x99,0xA5,0x42,0x3C };

	void printLetter(LedControl& brd, int addr, const byte* letter)
	{
		for (int i = 0; i < 8; i++)
		{
			brd.setRow(addr, i, letter[i]);
		}
	}

	void printLetter(LedControl& brd, int addr, const byte* letter, unsigned short int waitTime)
	{
		printLetter(brd, addr, letter);
		delay(waitTime);
	}
}